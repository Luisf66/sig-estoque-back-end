<testExecutions version="1">
  <file path="src/services/employee/create-employee.test.ts">
    <testCase name="Create Employee Service - should be able to create a new employee" duration="31" />
    <testCase name="Create Employee Service - should not allow creating a new employee with an existing email" duration="10" />
  </file>
  <file path="src/services/employee/fetch-all-employee.test.ts">
    <testCase name="Fetch All Employee Service - should be able to fetch all employees" duration="6" />
  </file>
  <file path="src/services/employee/find-employee-by-id.test.ts">
    <testCase name="Find Employee by ID Service - should be able to find an employee by ID" duration="4" />
    <testCase name="Find Employee by ID Service - should return null if employee is not found" duration="0" />
  </file>
  <file path="src/services/employee/find-employee-by-user-id.test.ts">
    <testCase name="Find Employee by User ID Service - should be able to find an employee by User ID" duration="4" />
    <testCase name="Find Employee by User ID Service - should return null if employee with User ID is not found" duration="0" />
  </file>
  <file path="src/services/employee/update-employee.test.ts">
    <testCase name="Update Employee Service - should be able to update an employee" duration="24" />
    <testCase name="Update Employee Service - should update an employee without changing the password" duration="6" />
    <testCase name="Update Employee Service - should throw an error if user is not found" duration="2" />
    <testCase name="Update Employee Service - should throw an error if updating employee fails" duration="16" />
  </file>
  <file path="src/services/manager/create-manager.test.ts">
    <testCase name="Create Manager Service - should be able to create a new manager" duration="114" />
    <testCase name="Create Manager Service - should hash the manager password before saving" duration="197" />
    <testCase name="Create Manager Service - should not allow creating a manager with an existing email" duration="136" />
  </file>
  <file path="src/services/manager/fetch-all-manager.test.ts">
    <testCase name="Fetch All Managers Service - should be able to fetch all managers" duration="7" />
  </file>
  <file path="src/services/manager/find-manager-by-id.test.ts">
    <testCase name="Find Manager By Id Service - should be able to find a manager by ID" duration="4" />
    <testCase name="Find Manager By Id Service - should throw NoRecordsFoundError if manager is not found" duration="1" />
  </file>
  <file path="src/services/manager/find-manager-by-user-id.test.ts">
    <testCase name="Find Manager By User ID Service - should be able to find a manager by user ID" duration="6" />
    <testCase name="Find Manager By User ID Service - should return null if manager is not found" duration="0" />
  </file>
  <file path="src/services/manager/update-manager.test.ts">
    <testCase name="Update Manager Service - should be able to update a manager&apos;s information" duration="44" />
    <testCase name="Update Manager Service - should be able to update manager&apos;s information without changing the password" duration="14" />
    <testCase name="Update Manager Service - should throw NoRecordsFoundError if user is not found" duration="2" />
    <testCase name="Update Manager Service - should throw NoRecordsFoundError if manager is not found" duration="8" />
  </file>
  <file path="src/services/product/create-product.test.ts">
    <testCase name="Create Product Service - should be able to create a new product" duration="3" />
  </file>
  <file path="src/services/product/fetch-all-product.test.ts">
    <testCase name="Fetch All Product Service - should be able to fetch all products" duration="6" />
  </file>
  <file path="src/services/product/find-product-by-id.test.ts">
    <testCase name="Fetch Product By Id Service - should be able to fetch product by id" duration="3" />
    <testCase name="Fetch Product By Id Service - should not be able to fetch product with wrong id" duration="1" />
    <testCase name="Fetch Product By Id Service - should not be able to fetch inactive product" duration="0" />
  </file>
  <file path="src/services/product/inactivate-product.test.ts">
    <testCase name="Inactivate Product Service - should be able to inactivate a product by id" duration="5" />
    <testCase name="Inactivate Product Service - should not be able to inactivate a product with wrong id" duration="3" />
  </file>
  <file path="src/services/product/patch-product.test.ts">
    <testCase name="PatchProductService - should update product data if product exists and is active" duration="6" />
    <testCase name="PatchProductService - should throw an error if product does not exist" duration="3" />
    <testCase name="PatchProductService - should throw an error if product is inactive" duration="1" />
  </file>
  <file path="src/services/product/reduce-product-stock.test.ts">
    <testCase name="Reduce Product Stock Service - should reduce stock successfully when there is sufficient stock" duration="3" />
    <testCase name="Reduce Product Stock Service - should throw ResourceNotFoundError if the product does not exist" duration="1" />
    <testCase name="Reduce Product Stock Service - should throw an error if product stock information is missing" duration="3" />
    <testCase name="Reduce Product Stock Service - should throw an error if there is insufficient stock" duration="1" />
  </file>
  <file path="src/services/purchase/create-purchase.test.ts">
    <testCase name="Create Purchase Service - should create a purchase with valid products" duration="5" />
    <testCase name="Create Purchase Service - should throw an error if a product is not found" duration="3" />
    <testCase name="Create Purchase Service - should throw an error if a product is inactive" duration="1" />
  </file>
  <file path="src/services/purchase/fetch-all-purchase-by-supplier-id.test.ts">
    <testCase name="FetchAllPurchaseBySupplierIdService - should fetch all purchases by supplier id" duration="4" />
    <testCase name="FetchAllPurchaseBySupplierIdService - should throw ResourceNotFoundError if supplier does not exist" duration="1" />
  </file>
  <file path="src/services/purchase/fetch-all-purchase-by-user-id.test.ts">
    <testCase name="FetchAllPurchaseByUserIdService - should fetch all purchases by user id" duration="6" />
    <testCase name="FetchAllPurchaseByUserIdService - should throw ResourceNotFoundError if user does not exist" duration="1" />
  </file>
  <file path="src/services/purchase/fetch-all-purchase.test.ts">
    <testCase name="FetchAllPurchaseService - should fetch all purchases" duration="5" />
    <testCase name="FetchAllPurchaseService - should return an empty array if no purchases exist" duration="1" />
  </file>
  <file path="src/services/purchase/find-purchase-by-id.test.ts">
    <testCase name="FindPurchaseByIdService - should find a purchase by id" duration="3" />
    <testCase name="FindPurchaseByIdService - should throw ResourceNotFoundError if purchase does not exist" duration="1" />
  </file>
  <file path="src/services/sale/create-sale.test.ts">
    <testCase name="Create Sale Service - should be able to create a new sale" duration="6" />
    <testCase name="Create Sale Service - should throw an error if a product is not found" duration="2" />
    <testCase name="Create Sale Service - should throw an error if a product is inactive" duration="1" />
    <testCase name="Create Sale Service - should throw an error if a stock product is null" duration="1" />
    <testCase name="Create Sale Service - should throw an error if there is insufficient stock" duration="1" />
  </file>
  <file path="src/services/sale/fetch-all-sale-by-user-id.test.ts">
    <testCase name="FetchAllSaleByUserIdService - deve buscar todas as vendas de um usuário existente" duration="5" />
    <testCase name="FetchAllSaleByUserIdService - deve lançar um erro se o usuário não for encontrado" duration="1" />
  </file>
  <file path="src/services/sale/fetch-all-sale.test.ts">
    <testCase name="FetchAllSaleService - deve buscar todas as vendas" duration="4" />
    <testCase name="FetchAllSaleService - deve retornar uma lista vazia se não houver vendas" duration="1" />
  </file>
  <file path="src/services/sale/find-sale-by-id.test.ts">
    <testCase name="FindSaleByIdService - deve encontrar uma venda pelo ID" duration="4" />
    <testCase name="FindSaleByIdService - deve lançar um erro se a venda não for encontrada" duration="2" />
  </file>
  <file path="src/services/supplier/create-supplier.test.ts">
    <testCase name="Create Supplier Service - should be able to create a new supplier" duration="4" />
  </file>
  <file path="src/services/supplier/delete-supplier.test.ts">
    <testCase name="Delete Supplier Service - should be able to delete a supplier by ID" duration="3" />
    <testCase name="Delete Supplier Service - should throw an error if the supplier does not exist" duration="2" />
  </file>
  <file path="src/services/supplier/fetch-all-supplier.test.ts">
    <testCase name="Fetch All Supplier Service - should be able to fetch all suppliers" duration="4" />
  </file>
  <file path="src/services/supplier/fetch-many-supplier-by-company-name.test.ts">
    <testCase name="Fetch Many Supplier By Company Name Service - should be able to fetch suppliers by company name" duration="5" />
  </file>
  <file path="src/services/supplier/fetch-many-supplier-by-social-name.test.ts">
    <testCase name="Fetch Many Supplier By Social Name Service - should be able to fetch suppliers by social name" duration="6" />
    <testCase name="Fetch Many Supplier By Social Name Service - should be able to fetch suppliers by multiple social names" duration="1" />
    <testCase name="Fetch Many Supplier By Social Name Service - should throw NoRecordsFoundError if no suppliers are found for the given social name" duration="1" />
  </file>
  <file path="src/services/supplier/find-supplier-by-id.test.ts">
    <testCase name="Find Supplier By Id Service - should be able to find a supplier by ID" duration="4" />
    <testCase name="Find Supplier By Id Service - should throw NoRecordsFoundError if supplier is not found" duration="2" />
  </file>
  <file path="src/services/supplier/patch-supplier.test.ts">
    <testCase name="PatchSupplierService - should update supplier data if supplier exists" duration="9" />
    <testCase name="PatchSupplierService - should throw an error if supplier does not exist" duration="4" />
  </file>
  <file path="src/services/user/authenticate-user.test.ts">
    <testCase name="Authenticate Service - should be able to authenticate" duration="33" />
    <testCase name="Authenticate Service - should not be able to authenticate with wrong email" duration="2" />
    <testCase name="Authenticate Service - should not be able to authenticate with wrong password" duration="12" />
  </file>
  <file path="src/services/user/delete-user.test.ts">
    <testCase name="Delete User Service - should be able to delete a user by ID" duration="8" />
    <testCase name="Delete User Service - should throw an error if the user does not exist" duration="3" />
  </file>
  <file path="src/services/user/get-all-users.test.ts">
    <testCase name="Get All Users Service - should return all users" duration="5" />
  </file>
  <file path="src/services/user/get-user-by-id.test.ts">
    <testCase name="Get User By ID Service - should return the user when the user exists" duration="4" />
    <testCase name="Get User By ID Service - should throw a ResourceNotFoundError when the user does not exist" duration="1" />
  </file>
  <file path="src/services/user/get-user-profile.test.ts">
    <testCase name="Get User Profile Service - should be able to get user profile" duration="35" />
    <testCase name="Get User Profile Service - should not be able to get user profile with wrong id" duration="2" />
  </file>
</testExecutions>