<testExecutions version="1">
  <file path="src/http/controllers/employee/create.test.ts">
    <testCase name="should create a new employee successfully" duration="102" />
    <testCase name="should return 409 if the employee already exists" duration="23" />
  </file>
  <file path="src/http/controllers/employee/fetch-all.test.ts">
    <testCase name="should fetch all employees successfully" duration="258" />
    <testCase name="should return 500 if there is an internal server error" duration="6" />
  </file>
  <file path="src/http/controllers/employee/find-by-id.test.ts">
    <testCase name="should find employee by ID successfully" duration="120" />
    <testCase name="should return 404 if no employee is found" duration="6" />
  </file>
  <file path="src/http/controllers/employee/update.test.ts">
    <testCase name="should update employee successfully" duration="75" />
    <testCase name="should return 500 if there is an internal server error" duration="4" />
  </file>
  <file path="src/http/controllers/manager/create.test.ts">
    <testCase name="should create a new manager successfully" duration="97" />
    <testCase name="should return 409 if the user already exists" duration="46" />
  </file>
  <file path="src/http/controllers/manager/fetch-all.test.ts">
    <testCase name="should fetch all managers successfully" duration="117" />
    <testCase name="should return 500 if there is an internal server error" duration="11" />
  </file>
  <file path="src/http/controllers/manager/find-by-id.test.ts">
    <testCase name="should return a manager by ID successfully" duration="69" />
    <testCase name="should return 404 if no manager is found" duration="9" />
  </file>
  <file path="src/http/controllers/manager/update.test.ts">
    <testCase name="should update manager successfully" duration="84" />
    <testCase name="should return a custom error message for testing" duration="8" />
  </file>
  <file path="src/http/controllers/product/create.test.ts">
    <testCase name="should create a new product successfully" duration="137" />
    <testCase name="should handle errors correctly" duration="39" />
  </file>
  <file path="src/http/controllers/product/fetch-all.test.ts">
    <testCase name="should fetch all products successfully" duration="61" />
    <testCase name="should return 500 if there is an internal server error" duration="4" />
  </file>
  <file path="src/http/controllers/product/find-by-id.test.ts">
    <testCase name="should find a product by id successfully" duration="81" />
    <testCase name="should return 404 if the product is not found" duration="6" />
    <testCase name="should return 500 if there is an internal server error" duration="21" />
  </file>
  <file path="src/http/controllers/product/inactivate.test.ts">
    <testCase name="should inactivate a product successfully" duration="121" />
    <testCase name="should return 404 if the product is not found" duration="7" />
    <testCase name="should return 500 if there is an internal server error" duration="6" />
  </file>
  <file path="src/http/controllers/product/patch.test.ts">
    <testCase name="should patch a product successfully" duration="80" />
    <testCase name="should return 404 if the product is not found" duration="20" />
    <testCase name="should return 500 if there is an internal server error" duration="42" />
  </file>
  <file path="src/http/controllers/purchase/create.test.ts">
    <testCase name="should create a new purchase successfully" duration="117" />
    <testCase name="should handle errors correctly" duration="16" />
  </file>
  <file path="src/http/controllers/purchase/fetch-all-by-supplier-id.test.ts">
    <testCase name="should fetch all purchases by supplier id successfully" duration="147" />
    <testCase name="should handle errors correctly" duration="17" />
  </file>
  <file path="src/http/controllers/purchase/fetch-all-by-user-id.test.ts">
    <testCase name="should fetch all purchases by user id successfully" duration="95" />
    <testCase name="should handle errors correctly" duration="6" />
  </file>
  <file path="src/http/controllers/purchase/fetch-all.test.ts">
    <testCase name="should fetch all purchases successfully" duration="85" />
    <testCase name="should handle errors correctly" duration="20" />
  </file>
  <file path="src/http/controllers/purchase/find-by-id.test.ts">
    <testCase name="should find a purchase by id successfully" duration="74" />
    <testCase name="should return 404 if purchase is not found" duration="10" />
  </file>
  <file path="src/http/controllers/sale/create.test.ts">
    <testCase name="should create a new sale successfully" duration="82" />
    <testCase name="should return 400 if the request payload is invalid" duration="33" />
    <testCase name="should handle service errors" duration="46" />
  </file>
  <file path="src/http/controllers/sale/fetch-all-by-user-id.test.ts">
    <testCase name="should fetch all sales for a valid userId" duration="122" />
    <testCase name="should handle service errors" duration="41" />
  </file>
  <file path="src/http/controllers/sale/fetch-all.test.ts">
    <testCase name="should fetch all sales successfully" duration="108" />
    <testCase name="should return 500 if an error occurs" duration="32" />
  </file>
  <file path="src/http/controllers/sale/find-by-id.test.ts">
    <testCase name="should fetch sale by ID successfully" duration="160" />
    <testCase name="should return 404 if sale is not found" duration="19" />
    <testCase name="should return 500 if an error occurs" duration="44" />
  </file>
  <file path="src/http/controllers/supplier/create.test.ts">
    <testCase name="createSupplier Controller - should create a new supplier and return it" duration="161" />
    <testCase name="createSupplier Controller - should return a 400 error if validation fails" duration="71" />
  </file>
  <file path="src/http/controllers/supplier/delete.test.ts">
    <testCase name="deleteSupplier Controller - should delete a supplier and return a 204 status" duration="96" />
    <testCase name="deleteSupplier Controller - should handle errors from the service and return a 500 status code" duration="19" />
  </file>
  <file path="src/http/controllers/supplier/fetch-all.test.ts">
    <testCase name="fetchAllSupplier Controller - should fetch all suppliers and return them" duration="112" />
    <testCase name="fetchAllSupplier Controller - should handle errors from the service and return a 500 status code" duration="18" />
  </file>
  <file path="src/http/controllers/supplier/fetch-many-by-company-name.test.ts">
    <testCase name="fetchManyByCompanyName Controller - should fetch suppliers by company name and return them" duration="147" />
    <testCase name="fetchManyByCompanyName Controller - should handle errors from the service and return a 500 status code" duration="13" />
  </file>
  <file path="src/http/controllers/supplier/fetch-many-by-social-name.test.ts">
    <testCase name="fetchManyBySocialName Controller - should fetch suppliers by social name and return them" duration="182" />
    <testCase name="fetchManyBySocialName Controller - should handle errors from the service and return a 500 status code" duration="13" />
  </file>
  <file path="src/http/controllers/supplier/find-by-id.test.ts">
    <testCase name="findSupplierById Controller - should fetch supplier by ID and return it" duration="113" />
    <testCase name="findSupplierById Controller - should handle errors from the service and return a 500 status code" duration="30" />
  </file>
  <file path="src/http/controllers/supplier/patch.test.ts">
    <testCase name="patchSupplier Controller - should update supplier and return the updated supplier" duration="119" />
    <testCase name="patchSupplier Controller - should handle validation errors and return a 400 status code" duration="16" />
    <testCase name="patchSupplier Controller - should handle errors from the service and return a 500 status code" duration="13" />
  </file>
  <file path="src/http/controllers/user/authenticate.test.ts">
    <testCase name="authenticateUser Controller - should authenticate the user and return a token" duration="11" />
    <testCase name="authenticateUser Controller - should return 400 if credentials are invalid" duration="2" />
    <testCase name="authenticateUser Controller - should throw an error if an unknown error occurs" duration="5" />
  </file>
  <file path="src/http/controllers/user/delete.test.ts">
    <testCase name="deleteUser Controller - should delete the user and return a success message" duration="5" />
    <testCase name="deleteUser Controller - should return 404 if the user is not found" duration="1" />
    <testCase name="deleteUser Controller - should return 500 if an unknown error occurs" duration="5" />
  </file>
  <file path="src/http/controllers/user/fetch-all.test.ts">
    <testCase name="fetchAllUsers Controller - should return all users successfully" duration="9" />
    <testCase name="fetchAllUsers Controller - should return 500 if an error occurs" duration="19" />
  </file>
  <file path="src/http/controllers/user/find-by-id.test.ts">
    <testCase name="findUserByid Controller - should return the user successfully" duration="8" />
    <testCase name="findUserByid Controller - should return 404 if the user is not found" duration="1" />
    <testCase name="findUserByid Controller - should return 500 if an error occurs" duration="16" />
  </file>
  <file path="src/http/controllers/user/get-user-profile.test.ts">
    <testCase name="profile Controller - should return user profile and manager if the user is a manager" duration="8" />
    <testCase name="profile Controller - should return 404 if the role is not found" duration="11" />
    <testCase name="profile Controller - should return 500 if an error occurs" duration="22" />
  </file>
  <file path="src/services/employee/create-employee.test.ts">
    <testCase name="Create Employee Service - should be able to create a new employee" duration="68" />
    <testCase name="Create Employee Service - should not allow creating a new employee with an existing email" duration="33" />
  </file>
  <file path="src/services/employee/fetch-all-employee.test.ts">
    <testCase name="Fetch All Employee Service - should be able to fetch all employees" duration="17" />
  </file>
  <file path="src/services/employee/find-employee-by-id.test.ts">
    <testCase name="Find Employee by ID Service - should be able to find an employee by ID" duration="12" />
    <testCase name="Find Employee by ID Service - should return null if employee is not found" duration="1" />
  </file>
  <file path="src/services/employee/find-employee-by-user-id.test.ts">
    <testCase name="Find Employee by User ID Service - should be able to find an employee by User ID" duration="9" />
    <testCase name="Find Employee by User ID Service - should return null if employee with User ID is not found" duration="2" />
  </file>
  <file path="src/services/employee/update-employee.test.ts">
    <testCase name="Update Employee Service - should be able to update an employee" duration="72" />
    <testCase name="Update Employee Service - should update an employee without changing the password" duration="21" />
    <testCase name="Update Employee Service - should throw an error if user is not found" duration="3" />
    <testCase name="Update Employee Service - should throw an error if updating employee fails" duration="26" />
  </file>
  <file path="src/services/manager/create-manager.test.ts">
    <testCase name="Create Manager Service - should be able to create a new manager" duration="254" />
    <testCase name="Create Manager Service - should hash the manager password before saving" duration="423" />
    <testCase name="Create Manager Service - should not allow creating a manager with an existing email" duration="204" />
  </file>
  <file path="src/services/manager/fetch-all-manager.test.ts">
    <testCase name="Fetch All Managers Service - should be able to fetch all managers" duration="10" />
  </file>
  <file path="src/services/manager/find-manager-by-id.test.ts">
    <testCase name="Find Manager By Id Service - should be able to find a manager by ID" duration="9" />
    <testCase name="Find Manager By Id Service - should throw NoRecordsFoundError if manager is not found" duration="15" />
  </file>
  <file path="src/services/manager/find-manager-by-user-id.test.ts">
    <testCase name="Find Manager By User ID Service - should be able to find a manager by user ID" duration="7" />
    <testCase name="Find Manager By User ID Service - should return null if manager is not found" duration="3" />
  </file>
  <file path="src/services/manager/update-manager.test.ts">
    <testCase name="Update Manager Service - should be able to update a manager&apos;s information" duration="51" />
    <testCase name="Update Manager Service - should be able to update manager&apos;s information without changing the password" duration="24" />
    <testCase name="Update Manager Service - should throw NoRecordsFoundError if user is not found" duration="1" />
    <testCase name="Update Manager Service - should throw NoRecordsFoundError if manager is not found" duration="15" />
  </file>
  <file path="src/services/product/create-product.test.ts">
    <testCase name="Create Product Service - should be able to create a new product" duration="3" />
  </file>
  <file path="src/services/product/fetch-all-product.test.ts">
    <testCase name="Fetch All Product Service - should be able to fetch all products" duration="10" />
  </file>
  <file path="src/services/product/find-product-by-id.test.ts">
    <testCase name="Fetch Product By Id Service - should be able to fetch product by id" duration="18" />
    <testCase name="Fetch Product By Id Service - should not be able to fetch product with wrong id" duration="2" />
    <testCase name="Fetch Product By Id Service - should not be able to fetch inactive product" duration="2" />
  </file>
  <file path="src/services/product/inactivate-product.test.ts">
    <testCase name="Inactivate Product Service - should be able to inactivate a product by id" duration="15" />
    <testCase name="Inactivate Product Service - should not be able to inactivate a product with wrong id" duration="2" />
  </file>
  <file path="src/services/product/patch-product.test.ts">
    <testCase name="PatchProductService - should update product data if product exists and is active" duration="28" />
    <testCase name="PatchProductService - should throw an error if product does not exist" duration="12" />
    <testCase name="PatchProductService - should throw an error if product is inactive" duration="2" />
  </file>
  <file path="src/services/product/reduce-product-stock.test.ts">
    <testCase name="Reduce Product Stock Service - should reduce stock successfully when there is sufficient stock" duration="3" />
    <testCase name="Reduce Product Stock Service - should throw ResourceNotFoundError if the product does not exist" duration="1" />
    <testCase name="Reduce Product Stock Service - should throw an error if product stock information is missing" duration="2" />
    <testCase name="Reduce Product Stock Service - should throw an error if there is insufficient stock" duration="8" />
  </file>
  <file path="src/services/purchase/create-purchase.test.ts">
    <testCase name="Create Purchase Service - should create a purchase with valid products" duration="28" />
    <testCase name="Create Purchase Service - should throw an error if a product is not found" duration="19" />
    <testCase name="Create Purchase Service - should throw an error if a product is inactive" duration="2" />
  </file>
  <file path="src/services/purchase/fetch-all-purchase-by-supplier-id.test.ts">
    <testCase name="FetchAllPurchaseBySupplierIdService - should fetch all purchases by supplier id" duration="6" />
    <testCase name="FetchAllPurchaseBySupplierIdService - should throw ResourceNotFoundError if supplier does not exist" duration="3" />
  </file>
  <file path="src/services/purchase/fetch-all-purchase-by-user-id.test.ts">
    <testCase name="FetchAllPurchaseByUserIdService - should fetch all purchases by user id" duration="10" />
    <testCase name="FetchAllPurchaseByUserIdService - should throw ResourceNotFoundError if user does not exist" duration="2" />
  </file>
  <file path="src/services/purchase/fetch-all-purchase.test.ts">
    <testCase name="FetchAllPurchaseService - should fetch all purchases" duration="7" />
    <testCase name="FetchAllPurchaseService - should return an empty array if no purchases exist" duration="1" />
  </file>
  <file path="src/services/purchase/find-purchase-by-id.test.ts">
    <testCase name="FindPurchaseByIdService - should find a purchase by id" duration="10" />
    <testCase name="FindPurchaseByIdService - should throw ResourceNotFoundError if purchase does not exist" duration="2" />
  </file>
  <file path="src/services/sale/create-sale.test.ts">
    <testCase name="Create Sale Service - should be able to create a new sale" duration="5" />
    <testCase name="Create Sale Service - should throw an error if a product is not found" duration="8" />
    <testCase name="Create Sale Service - should throw an error if a product is inactive" duration="1" />
    <testCase name="Create Sale Service - should throw an error if a stock product is null" duration="10" />
    <testCase name="Create Sale Service - should throw an error if there is insufficient stock" duration="1" />
  </file>
  <file path="src/services/sale/fetch-all-sale-by-user-id.test.ts">
    <testCase name="FetchAllSaleByUserIdService - deve buscar todas as vendas de um usuário existente" duration="4" />
    <testCase name="FetchAllSaleByUserIdService - deve lançar um erro se o usuário não for encontrado" duration="1" />
  </file>
  <file path="src/services/sale/fetch-all-sale.test.ts">
    <testCase name="FetchAllSaleService - deve buscar todas as vendas" duration="5" />
    <testCase name="FetchAllSaleService - deve retornar uma lista vazia se não houver vendas" duration="0" />
  </file>
  <file path="src/services/sale/find-sale-by-id.test.ts">
    <testCase name="FindSaleByIdService - deve encontrar uma venda pelo ID" duration="9" />
    <testCase name="FindSaleByIdService - deve lançar um erro se a venda não for encontrada" duration="3" />
  </file>
  <file path="src/services/supplier/create-supplier.test.ts">
    <testCase name="Create Supplier Service - should be able to create a new supplier" duration="3" />
  </file>
  <file path="src/services/supplier/delete-supplier.test.ts">
    <testCase name="Delete Supplier Service - should be able to delete a supplier by ID" duration="13" />
    <testCase name="Delete Supplier Service - should throw an error if the supplier does not exist" duration="8" />
  </file>
  <file path="src/services/supplier/fetch-all-supplier.test.ts">
    <testCase name="Fetch All Supplier Service - should be able to fetch all suppliers" duration="12" />
  </file>
  <file path="src/services/supplier/fetch-many-supplier-by-company-name.test.ts">
    <testCase name="Fetch Many Supplier By Company Name Service - should be able to fetch suppliers by company name" duration="25" />
  </file>
  <file path="src/services/supplier/fetch-many-supplier-by-social-name.test.ts">
    <testCase name="Fetch Many Supplier By Social Name Service - should be able to fetch suppliers by social name" duration="7" />
    <testCase name="Fetch Many Supplier By Social Name Service - should be able to fetch suppliers by multiple social names" duration="1" />
    <testCase name="Fetch Many Supplier By Social Name Service - should throw NoRecordsFoundError if no suppliers are found for the given social name" duration="1" />
  </file>
  <file path="src/services/supplier/find-supplier-by-id.test.ts">
    <testCase name="Find Supplier By Id Service - should be able to find a supplier by ID" duration="14" />
    <testCase name="Find Supplier By Id Service - should throw NoRecordsFoundError if supplier is not found" duration="6" />
  </file>
  <file path="src/services/supplier/patch-supplier.test.ts">
    <testCase name="PatchSupplierService - should update supplier data if supplier exists" duration="28" />
    <testCase name="PatchSupplierService - should throw an error if supplier does not exist" duration="2" />
  </file>
  <file path="src/services/user/authenticate-user.test.ts">
    <testCase name="Authenticate Service - should be able to authenticate" duration="122" />
    <testCase name="Authenticate Service - should not be able to authenticate with wrong email" duration="1" />
    <testCase name="Authenticate Service - should not be able to authenticate with wrong password" duration="20" />
  </file>
  <file path="src/services/user/delete-user.test.ts">
    <testCase name="Delete User Service - should be able to delete a user by ID" duration="9" />
    <testCase name="Delete User Service - should throw an error if the user does not exist" duration="8" />
  </file>
  <file path="src/services/user/get-all-users.test.ts">
    <testCase name="Get All Users Service - should return all users" duration="14" />
  </file>
  <file path="src/services/user/get-user-by-id.test.ts">
    <testCase name="Get User By ID Service - should return the user when the user exists" duration="3" />
    <testCase name="Get User By ID Service - should throw a ResourceNotFoundError when the user does not exist" duration="1" />
  </file>
  <file path="src/services/user/get-user-profile.test.ts">
    <testCase name="Get User Profile Service - should be able to get user profile" duration="62" />
    <testCase name="Get User Profile Service - should not be able to get user profile with wrong id" duration="1" />
  </file>
</testExecutions>